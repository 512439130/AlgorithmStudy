package com.yy.study.algorithm.leetcode;

import java.util.Scanner;
/**
 * 描述
 * 输入一个单向链表和一个节点的值，从单向链表中删除等于该值的节点，删除后如果链表中无节点则返回空指针。
 *
 * 链表的值不能重复。
 *
 * 构造过程，例如输入一行数据为:
 * 6 2 1 2 3 2 5 1 4 5 7 2 2
 * 则第一个参数6表示输入总共6个节点，第二个参数2表示头节点值为2，剩下的2个一组表示第2个节点值后面插入第1个节点值，为以下表示:
 * 1 2 表示为
 * 2->1
 * 链表为2->1
 *
 * 3 2表示为
 * 2->3
 * 链表为2->3->1
 *
 * 5 1表示为
 * 1->5
 * 链表为2->3->1->5
 *
 * 4 5表示为
 * 5->4
 * 链表为2->3->1->5->4
 *
 * 7 2表示为
 * 2->7
 * 链表为2->7->3->1->5->4
 *
 * 最后的链表的顺序为 2 7 3 1 5 4
 *
 * 最后一个参数为2，表示要删掉节点为2的值
 * 删除 结点 2
 *
 * 则结果为 7 3 1 5 4
 *
 */
public class ListNodeMain {
    //测试用例
    //483 5 8 5 10 8 13 10 17 13 21 5 24 8 27 5 31 24 33 27 35 5 36 31 39 10 44 27 49 8 54 49 56 44 57 8 61 31 63 13 68 17 69 56 73 44 76 73 80 8 84 63 89 69 93 39 96 61 98 27 103 21 108 17 111 39 115 111 120 8 123 84 128 108 130 73 133 128 134 76 138 73 143 93 146 10 151 13 155 49 156 134 160 68 163 156 167 151 171 36 175 128 180 111 183 98 187 120 192 138 196 146 197 160 202 21 206 36 207 63 208 5 213 146 215 160 218 187 221 54 222 167 226 61 231 143 232 197 234 115 236 183 238 49 240 84 241 84 243 24 247 21 250 108 254 171 255 89 256 250 257 226 262 241 266 160 271 180 275 232 276 266 281 80 286 57 288 39 291 36 295 236 300 76 304 84 306 76 310 76 315 232 319 103 322 221 325 57 327 202 328 231 329 130 331 234 332 44 335 304 336 222 338 108 339 306 344 151 348 329 351 256 353 197 358 36 359 254 364 315 366 288 370 240 371 218 374 215 375 96 376 206 377 49 382 206 384 275 386 366 388 61 390 143 394 348 397 33 400 36 402 151 407 39 412 33 413 69 416 73 418 226 420 353 423 394 428 306 430 213 435 215 438 335 439 364 442 111 444 319 447 390 448 236 453 155 456 325 461 39 464 329 468 430 471 115 472 68 477 128 478 471 479 123 484 257 485 167 490 468 493 151 494 218 496 418 499 111 503 281 506 241 511 478 513 468 516 250 520 413 524 315 529 327 533 255 535 80 538 328 541 376 543 54 545 167 550 196 552 231 554 295 557 56 561 108 563 226 566 384 570 496 574 304 579 241 584 44 586 371 589 336 591 384 592 54 593 171 598 222 603 453 606 266 610 566 612 351 617 461 618 304 620 61 622 187 624 390 625 271 629 468 632 57 633 232 638 561 639 348 643 36 644 461 647 513 648 338 652 416 655 247 660 175 661 610 664 592 668 57 669 496 674 485 675 115 677 592 681 624 682 315 684 435 686 402 688 541 692 384 696 675 699 384 703 327 705 160 706 407 708 236 712 661 717 592 721 359 724 705 728 439 731 579 732 103 733 84 737 358 741 407 745 592 747 234 750 213 753 430 754 566 759 353 761 479 766 315 769 478 770 24 771 76 775 769 777 747 782 447 784 208 786 384 790 638 793 732 796 688 801 448 802 633 807 306 808 606 809 448 814 146 816 93 818 236 820 479 823 412 828 49 829 796 830 655 834 171 839 814 841 120 844 80 847 839 849 699 853 57 854 247 858 550 859 706 863 579 868 21 873 770 876 375 877 24 882 370 883 648 886 624 890 759 892 858 895 706 899 717 902 327 905 699 907 382 911 69 915 412 918 370 919 809 922 17 926 541 931 57 936 907 940 130 945 574 949 550 954 892 957 456 958 442 961 322 963 453 966 108 967 664 971 829 972 484 974 632 979 375 984 351 989 919 991 814 993 664 994 784 995 890 1000 958 1003 911 1007 712 1010 247 1015 407 1019 664 1024 240 1029 989 1031 202 1034 471 1037 814 1042 579 1045 782 1048 384 1053 830 1054 592 1057 180 1060 566 1065 520 1066 300 1071 844 1076 520 1081 388 1082 793 1086 1076 1090 967 1092 115 1093 552 1098 134 1099 579 1102 669 1105 236 1109 1098 1110 1000 1114 255 1115 1060 1117 675 1121 271 1123 400 1125 332 1128 876 1129 801 1130 703 1132 849 1137 442 1141 221 1145 27 1150 111 1152 686 1155 197 1156 310 1158 816 1163 963 1168 668 1169 802 1170 655 1171 236 1173 472 1178 80 1181 563 1183 668 1188 344 1191 1170 1195 566 1200 814 1205 563 1210 1173 1211 478 1215 586 1220 643 1224 1169 1225 706 1229 503 1233 477 1235 610 1239 331 1241 27 1245 1130 1248 63 1250 967 1253 453 1257 1129 1259 271 1262 745 1266 27 1268 382 1271 310 1275 1205 1277 329 1279 696 1280 717 1285 766 1287 196 1292 394 1293 892 1295 402 1300 499 1301 338 1306 1141 1310 1229 1313 231 1317 471 1319 423 1321 1239 1324 1266 1326 745 1327 733 1328 151 1332 1259 1337 777 1340 886 1342 922 1345 44 1346 306 1348 963 1349 151 1350 33 1352 712 1356 1123 1357 545 1362 358 1365 624 1369 591 1373 8 1374 1262 1376 786 1379 807 1380 1259 1384 257 1386 692 1389 366 1394 1317 1396 777 1398 1241 1399 115 1404 1129 1406 541 1407 44 1411 612 1415 123 1418 56 1419 1211 1421 1125 1424 786 1426 247 1428 922 1432 570 1434 93 1435 1053 1436 1125 1438 1173 1440 940 1362
    //5 208 784 994 35 27 1266 1324 1241 1398 1145 98 183 236 1171 1105 818 708 448 809 919 989 1029 801 1129 1404 1257 295 554 44 1407 1345 584 332 1125 1436 1421 73 416 652 138 192 130 940 1440 329 1277 464 348 639 394 1292 423 1319 76 771 310 1271 1156 306 1346 807 1379 428 339 300 1066 134 1098 1109 156 163 56 1418 557 69 911 1003 413 520 1076 1086 1065 89 255 1114 533 33 1350 412 915 823 397 21 868 247 1426 1010 854 655 1170 1191 830 1053 1435 202 1031 327 902 703 1130 1245 529 103 732 793 1082 319 444 8 1373 120 841 187 622 218 494 371 586 1215 80 1178 844 1071 535 281 503 1229 1310 57 931 853 668 1183 1168 632 974 325 456 957 286 49 828 377 238 155 453 1253 963 1348 1163 603 54 592 1054 745 1326 1262 1374 717 1280 899 677 664 1019 993 967 1250 1090 543 221 1141 1306 322 961 24 877 770 873 243 31 61 620 388 1081 226 563 1205 1275 1181 418 496 669 1102 570 1432 257 1384 484 972 96 375 979 876 1128 36 643 1220 400 1123 1356 358 737 291 206 382 1268 907 936 376 541 1406 926 688 796 829 971 171 834 593 254 359 721 10 146 814 1200 1037 991 839 847 213 750 430 753 468 629 513 647 490 196 1287 550 949 858 892 1293 954 39 461 644 617 407 1015 741 706 1225 895 859 288 366 1389 386 111 1150 499 1300 442 1137 958 1000 1110 180 1057 271 1259 1380 1332 1121 625 115 1399 1092 675 1117 696 1279 471 1317 1394 1034 478 1211 1419 769 775 511 234 747 777 1396 1337 331 1239 1321 93 1434 816 1158 143 390 624 1365 886 1340 681 447 782 1045 231 1313 552 1093 328 538 13 151 1349 1328 493 402 1295 686 1152 344 1188 167 545 1357 485 674 222 598 336 589 63 1248 207 84 733 1327 304 618 574 945 335 438 241 579 1099 1042 863 731 506 262 240 1024 370 918 882 123 1415 479 820 761 17 922 1428 1342 108 966 561 638 790 338 1301 648 883 250 516 256 351 984 612 1411 128 477 1233 175 660 133 68 472 1173 1438 1210 160 705 724 266 606 808 276 215 435 684 374 197 1155 353 759 890 995 420 232 633 802 1169 1224 315 766 1285 682 524 364 439 728 275 384 1048 786 1424 1376 699 905 849 1132 692 1386 591 1369 566 1195 1060 1115 754 610 1235 661 712 1352 1007

    //510 2 6 2 9 2 14 9 19 2 23 6 27 23 29 19 34 2 37 27 38 19 39 37 41 19 46 39 49 19 54 23 56 29 59 19 64 59 68 6 71 41 75 27 76 68 81 27 86 71 89 9 92 19 97 49 99 89 100 29 101 19 106 76 110 97 114 71 117 54 120 97 122 99 126 92 130 41 131 14 133 92 138 41 139 106 143 99 144 6 147 34 150 19 154 110 158 117 160 76 162 100 165 56 166 126 168 162 173 150 176 144 179 37 181 89 185 81 189 117 194 56 199 160 203 76 208 86 210 168 212 179 213 6 218 110 222 213 226 114 229 54 232 168 235 71 237 23 240 38 244 226 247 232 251 81 252 208 254 247 255 244 260 173 262 168 266 208 268 86 271 59 273 110 278 75 282 255 285 126 289 212 292 106 293 38 297 226 301 158 302 39 303 292 304 189 305 273 306 273 308 213 311 126 316 213 321 194 326 306 331 71 336 138 338 162 343 75 345 131 349 120 352 138 354 305 355 306 356 173 360 355 362 229 364 321 365 212 370 27 373 101 377 301 379 29 383 14 385 64 388 143 391 338 396 349 401 260 406 303 410 179 413 252 414 304 418 297 421 19 426 176 430 210 433 247 436 213 438 370 441 173 443 130 444 364 445 101 447 92 451 86 453 194 457 321 462 273 463 92 465 453 468 158 471 56 472 126 477 154 481 302 483 445 486 110 489 185 494 352 498 418 501 352 504 343 505 154 509 251 513 338 516 505 521 383 525 302 529 472 534 396 539 203 543 252 545 338 548 509 552 235 555 525 557 9 560 160 563 360 568 166 569 560 574 489 577 362 578 308 579 130 583 162 588 552 593 441 596 143 598 154 602 413 605 525 608 133 612 539 617 396 621 293 626 377 631 621 636 126 637 271 639 445 643 598 645 255 648 252 651 477 652 232 655 521 660 349 662 143 667 583 670 552 673 365 675 645 677 354 681 92 685 617 689 396 692 396 697 273 701 577 702 509 703 331 706 218 710 463 712 689 713 545 715 406 717 285 719 304 723 19 726 39 727 117 732 218 734 360 738 262 740 147 743 588 747 677 752 189 756 203 761 306 764 379 765 560 769 552 772 165 773 139 776 453 778 436 779 727 781 612 785 608 787 293 788 101 792 356 794 86 799 75 802 194 806 86 808 588 812 199 816 631 821 662 823 251 824 168 827 99 829 418 830 652 831 39 833 436 834 444 838 126 840 373 843 489 847 131 848 578 850 370 852 54 857 122 860 471 864 740 867 338 870 6 872 173 873 847 878 23 879 76 884 834 889 621 891 468 892 723 893 543 897 761 900 794 903 568 906 732 907 331 908 821 911 23 913 356 917 821 920 81 925 232 929 421 930 808 931 9 935 892 936 391 937 213 938 483 943 756 946 734 947 385 952 913 957 645 960 436 964 37 969 41 972 345 975 740 979 501 983 39 985 823 987 462 988 821 992 738 993 681 996 830 998 988 999 251 1003 430 1006 266 1010 996 1015 799 1020 829 1022 81 1025 645 1029 126 1031 747 1035 285 1038 38 1040 208 1043 840 1048 179 1053 131 1055 237 1060 208 1061 947 1062 726 1065 788 1070 626 1074 806 1076 436 1077 651 1079 988 1082 889 1085 444 1089 772 1091 773 1092 833 1094 1040 1099 889 1102 794 1107 345 1109 732 1111 702 1115 850 1120 23 1124 38 1129 1006 1132 588 1133 765 1135 860 1139 421 1143 583 1146 1133 1148 352 1150 120 1152 574 1155 240 1160 303 1165 1062 1170 444 1174 150 1179 260 1180 301 1183 992 1188 362 1189 643 1193 747 1194 1165 1196 864 1199 1196 1203 9 1205 1085 1209 1102 1211 840 1215 14 1220 126 1222 1124 1224 360 1225 920 1226 37 1230 626 1231 396 1235 1070 1240 557 1245 617 1249 1061 1251 1152 1254 244 1255 46 1259 792 1263 451 1264 240 1265 637 1270 738 1274 1029 1277 426 1280 617 1283 154 1286 1165 1288 596 1289 185 1293 262 1297 418 1299 1065 1302 778 1306 1231 1311 913 1313 917 1316 463 1320 1132 1325 752 1328 1120 1331 906 1335 1146 1340 643 1342 1020 1343 2 1345 702 1346 821 1351 308 1352 569 1357 426 1360 734 1362 857 1363 794 1364 308 1365 1316 1367 829 1369 150 1373 943 1377 379 1381 343 1386 38 1387 521 1388 1124 1390 443 1394 2 1397 81 1400 457 1403 1091 1406 311 1409 1397 1414 972 1419 100 1423 539 1424 1357 1426 662 1428 525 1430 972 1435 743 1439 1369 1441 1251 1446 723 1448 867 1450 643 1455 99 1457 979 1462 987 1463 1373 1466 972 1469 1129 1474 301 1478 1155 1479 667 1484 208 1485 568 1490 370 1491 226 1494 513 1498 913 1502 1265 1504 806 1509 1092 1511 1435 1514 931 1518 166 1522 778 1523 831 1526 834 1531 1065 1533 1283 1536 406 1540 453 1542 764 1546 354 1547 596 1548 414 692


    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        while(scanner.hasNext()){
            String value = scanner.nextLine();
            value = value.trim();
            ListNode node = getNode(value);
            ListNode.printOrSpace(node);
        }
    }


    //通过题意求得值
    public static ListNode getNode(String valueKey){
        ListNode node = new ListNode(-1);

        //计数器
        int count = 0;
        //待插入的节点值
        int value = -1;
        //插入位置（元素尾部）
        int num = 0;
        StringBuilder builder = new StringBuilder();

        int headCount = 0;
        for(int i = 0; i < valueKey.length(); i++){
            if(valueKey.charAt(i) != ' '){
                int singleNumber = valueKey.charAt(i) - '0';
                builder.append(singleNumber);
                if(i == valueKey.length() - 1){
                    num = Integer.parseInt(builder.toString());
//                     System.out.println("delete:"+num);
                    //删除节点
                    node = removeNode(node,num);
                }
            } else {

                if(builder != null){
                    num = Integer.parseInt(builder.toString());
                    builder.setLength(0);
                    if(headCount == 1){
                        //创建头结点
                        node = new ListNode(num);
                    }
                    if(headCount >= 2) {
                        count++;
                        if(count == 2){
                            node = insertNode(node,num,value);
                            count = 0;
                            value = -1;
                        } else {
                            value = num;
                        }
                    }
                    headCount++;
                }
            }

        }
        return node;
    }
    //通过节点值指定插入链表
    public static ListNode insertNode(ListNode node, int insertNodeValue, int newNodeValue){
        ListNode cur = node;
        ListNode newNode = new ListNode(newNodeValue);
        while(cur != null){
            if(cur.val == insertNodeValue){
                ListNode curNext = cur.next;
                cur.next = newNode;
                newNode.next = curNext;
            }
            cur = cur.next;
        }
        return node;
    }

    ///链表删除某个节点
    public static ListNode removeNode(ListNode node, int deleteVal){
        //临时头结点
        ListNode temp = new ListNode(-1);
        temp.next = node;
        //当前节点的上一个节点
        ListNode pre = temp;
        //当前节点
        ListNode cur = node;

        while(cur != null){
            if(cur.val == deleteVal){
                pre.next = cur.next;
            } else {
                pre = cur;
            }
            cur = cur.next;
        }
        return temp.next;
    }
}


class ListNode{
    int val;
    ListNode next;
    ListNode(){}
    ListNode(int val){
        this.val = val;
    }
    ListNode(int val, ListNode next){
        this.next = next;
    }

    public static ListNode arrayToListNode(int[] array){
        int length = array.length;
        ListNode root = new ListNode(array[0]);
        ListNode pre = root;
        for(int i = 1; i < array.length; i++){
            pre.next = new ListNode(array[i]);
            pre = pre.next;
        }
        return root;
    }

    public static void print(ListNode node){
        if(node == null) System.out.print(node);
        while(node != null){
            System.out.print(node.val);
            node = node.next;
        }
        System.out.println();
    }

    public static void printOrSpace(ListNode node){
        if(node == null) System.out.print(node);
        while(node != null){
            System.out.print(node.val);
            node = node.next;
            if(node != null){
                System.out.print(" ");
            }
        }
        System.out.println();
    }
}
